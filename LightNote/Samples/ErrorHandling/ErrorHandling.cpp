//==============================================================================
// エラー処理のサンプル
//------------------------------------------------------------------------------
/*
	LightNote の関数はエラーが発生すると、
	デフォルトではメッセージボックスを表示した後、エラーコードを返します。
	
	これは開発中の利便性を考慮した動作で、
	ラフに開発を行う時はほとんどの場合デフォルトの処理で問題ないと思いますが、
	エラーメッセージをカスタマイズしたり、メッセージボックスを出力せずに
	自前でエラー処理を行いたい場合は、デフォルトのエラー処理をカスタマイズすることができます。

	カスタマイズは、LNException_SetHandler() で登録するコールバック関数を
	実装することで行います。
	実装例は本プログラムの ExceptionCallback() をご覧ください。
*/
//==============================================================================

#include <lnote.h>

void ExceptionCallback( lnErrorCode errCode );

//----------------------------------------------------------------------
// main
//----------------------------------------------------------------------
int main()
{
	// エラー発生時の処理をカスタマイズすための関数を登録する
	// (コメントアウトする等して、エラー時の動作が変わることを確認してください)
	LNException_SetHandler( ExceptionCallback );

	if ( LNCore_Initialize() != LN_OK )
		return -1;

	// 存在しないファイルを開こうとしてみる
	lnResult r = LNAudio_PlayBGM( "xxxx.wav", 100, 100, 0 );
	if ( r != LN_OK )
		goto Exit;

	// メインループ
	lnBool endRequested;
	do
	{
		LNCore_Update();
		LNCore_IsEndRequested(&endRequested);
	} while (endRequested == LN_FALSE);
Exit:
	LNCore_Terminate();
	return 0;
}

//----------------------------------------------------------------------
// カスタムのエラーコールバック
//----------------------------------------------------------------------
void ExceptionCallback( lnErrorCode errCode )
{
	switch ( errCode )
	{
	// ファイルが見つからなかったときはコンソールに出力するだけにする
	case LN_ERR_FILE_NOT_FOUND:
		printf( "サンプルエラー出力 : ファイルが見つかりませんでした。\n" );
		break;
	// それ以外のエラーはデフォルトの処理 (メッセージボックス出力) に任せる
	default:
		LNException_ProcDefault();
		break;
	}
}
