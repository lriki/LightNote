//==============================================================================
// DrawingShapes 
//==============================================================================

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
#include "stdafx.h"
#include "../Base/StringUtils.h"
#include "../Base/Parser.h"
#include "DrawingShapes.h"

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
namespace LNote
{
namespace Core
{
namespace Geometry
{

//==============================================================================
// ■ Point クラス
//==============================================================================

	//----------------------------------------------------------------------
	// ● コンソールに出力する
	//----------------------------------------------------------------------
 //   void Point::dump( const char* str_ ) const
	//{
	//	if ( str_ )
	//	{
	//		printf( "%s", str_ );
	//	}
	//	else
	//	{
	//		printf( "◆ Point " );
	//	}
	//	printf( "( %d, %d )\n", x, y );
	//}

//==============================================================================
// ■ Thickness
//==============================================================================

    Thickness Thickness::parse( const lnChar* str )
    {
        Base::Parser parser;
        Base::OneLineCSVAnalyzer analyzer;
        parser.analyze( str, &analyzer );

        if ( analyzer.getElementCount() == 1 )
        {
            int t = analyzer.getInt( 0 );
            return Thickness( t, t, t, t );
        }
        if ( analyzer.getElementCount() == 4 )
        {
            return Thickness(
                analyzer.getInt( 0 ),
                analyzer.getInt( 1 ),
                analyzer.getInt( 2 ),
                analyzer.getInt( 3 ) );
        }
        return Thickness();
    }

//==============================================================================
// ■ Rect クラス
//==============================================================================

    Rect  Rect::ZERO( 0, 0, 0, 0 );
    RectF RectF::ZERO( 0, 0, 0, 0 );


#if 0
     Rect Rect::ZERO( 0, 0, 0, 0 );

	//----------------------------------------------------------------------
	// ● デフォルトコンストラクタ
	//----------------------------------------------------------------------
    Rect::Rect()
        : x( 0 ), y( 0 ), w( 0 ), h( 0 )
    {
	}

	//----------------------------------------------------------------------
	// ● コンストラクタ
	//----------------------------------------------------------------------
    Rect::Rect( int x_, int y_, int width_, int height_ )
    {
	    x = x_;
        y = y_;
        w = width_;
        h = height_;
    }

	//----------------------------------------------------------------------
	// ● 各要素をまとめて設定する
	//----------------------------------------------------------------------
    void Rect::set( int x_, int y_, int width_, int height_ )
    {
	    x = x_;
        y = y_;
        w = width_;
        h = height_;
    }

	//----------------------------------------------------------------------
	// ● rect_ の矩形から padding_ 分の空白を開けた矩形を設定する
	//----------------------------------------------------------------------
    void Rect::setPadding( const Rect& rect_, int padding_ )
    {
	    x = rect_.x + padding_;
	    y = rect_.y + padding_;
	    w = rect_.w - padding_ * 2;
	    h = rect_.h - padding_ * 2;
        w = ( w  < 0 ) ? 0 : w;
        h = ( h < 0 ) ? 0 : h;
    }

	//----------------------------------------------------------------------
	// ● 点が矩形の中に入っているかの判定
	//----------------------------------------------------------------------
	bool Rect::contains( const Point& point_ ) const
	{
		return ( x <= point_.x && point_.x < x + w &&
				 y <= point_.y && point_.y < y + h );
	}

	//----------------------------------------------------------------------
	// ● 指定された矩形を使ってクリッピングする
	//----------------------------------------------------------------------
    void Rect::clip( const Rect& area_ )
    {
        int l0 = x;
        int t0 = y;
        int r0 = x + w;
        int b0 = y + h;

        int l1 = area_.x;
        int t1 = area_.y;
        int r1 = area_.x + area_.w;
        int b1 = area_.y + area_.h;

        if ( l0 < l1 ) l0 = l1;
        if ( t0 < t1 ) t0 = t1;
        if ( r0 > r1 ) r0 = r1;
        if ( b0 > b1 ) b0 = b1;

        x = l0;
        y = t0;
        w = r0 - l0;
        h = b0 - t0;
    }

	//----------------------------------------------------------------------
	// ● コンソールに出力する
	//----------------------------------------------------------------------
    void Rect::dump( const char* str_ ) const
    {
	    if ( str_ )
		{
			printf( "%s", str_ );
		}
		else
		{
			printf( "◆ Rect " );
		}
		printf( "( %d, %d, %d, %d )\n", x, y, w, h );
    }

	//----------------------------------------------------------------------
	// ● 比較
	//----------------------------------------------------------------------
    bool Rect::operator == ( const Rect& rect_ ) const
    {
        return ( x == rect_.x && y == rect_.y && w == rect_.w && h == rect_.h );
    }
	bool Rect::operator != ( const Rect& rect_ ) const
    {
        return ( x != rect_.x || y != rect_.y || w != rect_.w || h != rect_.h );
    }
#endif

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

} // namespace Geometry
} // namespace Core
} // namespace LNote

//==============================================================================
//
//==============================================================================