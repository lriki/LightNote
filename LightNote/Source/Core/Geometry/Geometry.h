//==============================================================================
// Geometry 
//------------------------------------------------------------------------------
///**
//  @file       Geometry.h
//  @brief      Geometry
//  @author     Riki
//*/
//==============================================================================

#pragma once

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
#include "../Math/Math.h"
#include "../Math/Vector2.h"
#include "../Math/Vector3.h"
#include "../Math/Matrix.h"

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
namespace LNote
{
namespace Core
{

//==============================================================================
// ■ LSquare クラス
//------------------------------------------------------------------------------
///**
//  @brief		四角形のクラス
//*/
//==============================================================================
class LSquare
{
public:

};


//==============================================================================
// ■ LSphere クラス
//------------------------------------------------------------------------------
///**
//  @brief		球のクラス
//*/
//==============================================================================
struct LSphere
{
    LVector3     Position;  ///< 中心位置
    lnFloat     Radius;    ///< 半径
};

//==============================================================================
// ■ LRay クラス
//------------------------------------------------------------------------------
///**
//  @brief		線分のクラス
//*/
//==============================================================================
struct LRay
{
    LVector3     Start;      ///< 始点
    LVector3     End;        ///< 終点
};

//==============================================================================
// ■ LBox クラス
//------------------------------------------------------------------------------
///**
//  @brief		ボックスのクラス (軸並行境界ボックス・AABB)
//*/
//==============================================================================
struct LBox
{
    LVector3     Min;       ///< 最小点
    LVector3     Max;       ///< 最大点

public:

	/// 任意の2点からボックスを作る
    void create( const LVector3& p0_, const LVector3& p1_ );

};


//==============================================================================
// ■ LOBBox クラス
//------------------------------------------------------------------------------
///**
//  @brief		有向境界ボックスのクラス
//*/
//==============================================================================
struct LOBBox
{
public:

    LVector3     Position;          ///< ボックスの中心
    LVector3     Length;            ///< ボックスの各辺の長さ
    LVector3     Direction[ 3 ];    ///< 各軸の向き
};


//==============================================================================
// ■ LPlane クラス
//------------------------------------------------------------------------------
///**
//  @brief		平面のクラス
//*/
//==============================================================================
class LPlane
{
public:

    lnFloat a, b, c, d;

public:

	/// デフォルトコンストラクタ
    LPlane();

	/// コンストラクタ
    LPlane( lnFloat a_, lnFloat b_, lnFloat c_, lnFloat d_ );

	/// コンストラクタ (3点から作成する)
    LPlane( const LVector3& v0_, const LVector3& v1_, const LVector3& v2_ );

public:

	/// 3点から作成する (作成後、正規化する)
    void create( const LVector3& v0_, const LVector3& v1_, const LVector3& v2_ );

	/// 平面と 3D ベクトルの内積を計算する (w = 1 として計算する)
    lnFloat dotCoord( const LVector3& v0_ ) const;

	/// 点が平面の内側にあるかを判定する
    bool checkInside( const LVector3& point_ ) const;

	/// 球が平面の内側にあるかを判定する
	bool checkInside( const LVector3& point_, lnFloat radius_ ) const;

	/// コンソールに出力する
	void dump( const char* str_ = NULL ) const;
};


/// 錐台の各面
enum LNFrustumSide
{
    LN_FRUSTUM_NEAR = 0,
    LN_FRUSTUM_FAR,
    LN_FRUSTUM_TOP,
    LN_FRUSTUM_RIGHT,
    LN_FRUSTUM_BOTTOM,
    LN_FRUSTUM_LEFT,
    LN_FRUSTUM_MAX_PANELS
};

//==============================================================================
// ■ LFrustum クラス
//------------------------------------------------------------------------------
///**
//  @brief		錐台のクラス
//*/
//==============================================================================
class LFrustum
{
public:

    LVector3     NearClip[ 4 ];  ///< (順番は右上から時計回り)
    LVector3     FarClip[ 4 ];   ///< )順番は右上から時計回り)
};

//==============================================================================
// ■ LViewFrustum クラス
//------------------------------------------------------------------------------
///**
//  @brief		視錐台のクラス
//*/
//==============================================================================
class LViewFrustum
    : public LFrustum
{
public:

    LPlane      Planes[ LN_FRUSTUM_MAX_PANELS ];
    LVector3    Right;      /// 正規化済み右方向 ( ( 1.0f, 0.0f, 0.0f ) 基本的に定数。const でもいいかも？)
    LVector3    Up;         /// 正規化済み上方向 ( ( 0.0f, 1.0f, 0.0f ) 基本的に定数。const でもいいかも？)
    LVector3    Forward;    /// 正規化済み前方向 ( ( 0.0f, 0.0f, 1.0f ) 基本的に定数。const でもいいかも？)
    lnFloat     Fov;        ///< 2D の場合は 0
	lnFloat     Aspect;     ///< 2D の場合は 0
	lnFloat     Near;
	lnFloat     Far;

public:

	/// デフォルトコンストラクタ
    LViewFrustum();

	/// コンストラクタ
    LViewFrustum( lnFloat fov_, lnFloat aspect_, lnFloat near_clip_, lnFloat far_clip_ );

public:

	/// 作成
    void create( lnFloat fov_, lnFloat aspect_, lnFloat near_clip_, lnFloat far_clip_ );

	/// 作成
    void create2DProjection( lnFloat width_, lnFloat height_, lnFloat near_clip_, lnFloat far_clip_ );
/*
	/// 視野角の設定
    void setFOV( lnFloat fov_ ) { Fov = fov_; create( Fov, Aspect, Near, Far ); }

	/// アスペクト比の設定
	void setAspect( lnFloat aspect_ ) { Aspect = aspect_; create( Fov, Aspect, Near, Far ); }

	/// 手前のビュー平面 Z 値の設定
	void setNear( lnFloat near_clip_ ) { Near = near_clip_; create( Fov, Aspect, Near, Far ); }

	/// 奥のビュー平面 Z 値の設定
	void setFar( lnFloat far_clip_ ) { Far = far_clip_; create( Fov, Aspect, Near, Far ); }
*/
	/// 設定されているデータをもとに視錐台を作成する (transform_ は NULL 指定可能 その場合、Z+ が正面)
    void update( const LMatrix* transform_ );

	/// 平面の取得
    const LPlane& getPlane( LNFrustumSide side_ ) { return Planes[ side_ ]; }

	/// 点が錐台の内側にあるかを判定する
    bool checkInside( const LVector3& point_ ) const;

	/// 球が錐台の内側にあるかを判定する
	bool checkInside( const LVector3& point_, lnFloat radius_ ) const;
};


//==============================================================================
// ■ LCapsule クラス
//------------------------------------------------------------------------------
///**
//  @brief		カプセルのクラス
//*/
//==============================================================================
class LCapsule
{
public:

    LVector3     Position;          ///< 中心座標
    LVector3     Radius;            ///< 半径
    LVector3     Height;            ///< 高さ
};

//==============================================================================
// ■ LCone クラス
//------------------------------------------------------------------------------
///**
//  @brief		円錐のクラス
//*/
//==============================================================================
class LCone
{
public:

    LVector3     Position;          ///< 中心座標
    LVector3     Radius;            ///< 半径
    LVector3     Height;            ///< 高さ
};



enum LNCollisionSource3DType
{
    LN_COLSRC3D_SPHERE = 0,     ///< 球
    LN_COLSRC3D_RAY,            ///< 線分
    LN_COLSRC3D_BOX,            ///< 箱
    LN_COLSRC3D_OBB,            ///< 有向境界ボックス
};

//==============================================================================
// ■ CollisionSource3D クラス
//------------------------------------------------------------------------------
///**
//  @brief		3D 用の衝突判定の形状をカプセル化するクラス
//*/
//==============================================================================
class LCollisionSource3D
{
public:

    
};


//==============================================================================
// ■ LGeometry クラス
//------------------------------------------------------------------------------
///**
//  @brief      幾何学関係のモジュール
//
//  @note
//              LMath に含めると流石に数が多くなるので…。
//*/
//==============================================================================
class LGeometry
{
public:

	//----------------------------------------------------------------------
	///**
	//  @brief      点と平面の距離を求める（最短距離）
	//
	//  @param[in]  pos1_   : 調べる点
	//  @param[in]  pos2_   : 平面上の点
	//  @param[in]  normal_ : 平面法線
	//*/
	//----------------------------------------------------------------------
    static lnFloat PointPolyDistance( const LVector3& pos1_, const LVector3& pos2_, const LVector3& normal_ )
    {
        return LVector3::dot( pos1_ - pos2_, normal_ );
    }
};

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------

} // namespace Core
} // namespace LNote

//==============================================================================
//
//==============================================================================