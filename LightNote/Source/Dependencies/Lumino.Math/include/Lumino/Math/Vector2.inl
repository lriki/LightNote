
namespace Lumino
{

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2::Vector2()
{
	X = Y = 0.0f;
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2::Vector2(float x_, float y_)
{
	X = x_;
	Y = y_;
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline void Vector2::Set(float x_, float y_)
{
	X = x_;
	Y = y_;
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2& Vector2::operator += (const Vector2& v)
{
	X += v.X;
	Y += v.Y;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2& Vector2::operator += (float v)
{
	X += v;
	Y += v;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2& Vector2::operator -= (const Vector2& v)
{
	X -= v.X;
	Y -= v.Y;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2& Vector2::operator -= (float v)
{
	X -= v;
	Y -= v;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2& Vector2::operator *= (const Vector2& v)
{
	X *= v.X;
	Y *= v.Y;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2& Vector2::operator *= (float v)
{
	X *= v;
	Y *= v;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2& Vector2::operator /= (const Vector2& v)
{
	X /= v.X;
	Y /= v.Y;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2& Vector2::operator /= (float v)
{
	v = 1.0f / v;
	X *= v;
	Y *= v;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2 operator + (const Vector2& v1, const Vector2& v2)
{
	return Vector2(
		v1.X + v2.X,
		v1.Y + v2.Y);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2 operator + (const Vector2& v1, float v2)
{
	return Vector2(
		v1.X + v2,
		v1.Y + v2);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2 operator + (float v1, const Vector2& v2)
{
	return Vector2(
		v1 + v2.X,
		v1 + v2.Y);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2 operator - (const Vector2& v1, const Vector2& v2)
{
	return Vector2(
		v1.X - v2.X,
		v1.Y - v2.Y);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2 operator - (const Vector2& v1, float v2)
{
	return Vector2(
		v1.X - v2,
		v1.Y - v2);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2 operator - (float v1, const Vector2& v2)
{
	return Vector2(
		v1 - v2.X,
		v1 - v2.Y);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2 operator * (const Vector2& v1, const Vector2& v2)
{
	return Vector2(
		v1.X * v2.X,
		v1.Y * v2.Y);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2 operator * (const Vector2& v1, float v2)
{
	return Vector2(
		v1.X * v2,
		v1.Y * v2);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2 operator * (float v1, const Vector2& v2)
{
	return Vector2(
		v1 * v2.X,
		v1 * v2.Y);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2 operator / (const Vector2& v1, const Vector2& v2)
{
	return Vector2(
		v1.X / v2.X,
		v1.Y / v2.Y);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2 operator / (const Vector2& v1, float v2)
{
	v2 = 1.0f / v2;
	return Vector2(
		v1.X * v2,
		v1.Y * v2);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2 operator / (float v1, const Vector2& v2)
{
	return Vector2(
		v1 / v2.X,
		v1 / v2.Y);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector2 operator - (const Vector2& v1)
{
	return Vector2(
		-v1.X,
		-v1.Y);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline bool Vector2::operator == (const Vector2& v) const
{
	return (X == v.X && Y == v.Y);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline bool Vector2::operator != (const Vector2& v) const
{
	return (X != v.X || Y != v.Y);
}

} // namespace Lumino
