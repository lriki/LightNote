
namespace Lumino
{

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4::Vector4()
{
	X = Y = Z = W = 0.0f;
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4::Vector4(float x_, float y_, float z_, float w_)
{
	X = x_;
	Y = y_;
	Z = z_;
    W = w_;
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline void Vector4::Set(float x_, float y_, float z_, float w_)
{
	X = x_;
	Y = y_;
	Z = z_;
    W = w_;
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4& Vector4::operator += (const Vector4& v)
{
	X += v.X;
	Y += v.Y;
	Z += v.Z;
	W += v.W;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4& Vector4::operator += (float v)
{
	X += v;
	Y += v;
	Z += v;
	W += v;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4& Vector4::operator -= (const Vector4& v)
{
	X -= v.X;
	Y -= v.Y;
	Z -= v.Z;
	W -= v.W;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4& Vector4::operator -= (float v)
{
	X -= v;
	Y -= v;
	Z -= v;
	W -= v;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4& Vector4::operator *= (const Vector4& v)
{
	X *= v.X;
	Y *= v.Y;
	Z *= v.Z;
	W *= v.W;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4& Vector4::operator *= (float v)
{
	X *= v;
	Y *= v;
	Z *= v;
	W *= v;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4& Vector4::operator /= (const Vector4& v)
{
	X /= v.X;
	Y /= v.Y;
	Z /= v.Z;
	W /= v.W;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4& Vector4::operator /= (float v)
{
	v = 1.0f / v;
	X *= v;
	Y *= v;
	Z *= v;
	W *= v;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator + (const Vector4& v1, const Vector4& v2)
{
	return Vector4(
		v1.X + v2.X,
		v1.Y + v2.Y,
		v1.Z + v2.Z,
		v1.W + v2.W);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator + (const Vector4& v1, float v2)
{
	return Vector4(
		v1.X + v2,
		v1.Y + v2,
		v1.Z + v2,
		v1.W + v2);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator + (float v1, const Vector4& v2)
{
	return Vector4(
		v1 + v2.X,
		v1 + v2.Y,
		v1 + v2.Z,
		v1 + v2.W);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator - (const Vector4& v1, const Vector4& v2)
{
	return Vector4(
		v1.X - v2.X,
		v1.Y - v2.Y,
		v1.Z - v2.Z,
		v1.W - v2.W);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator - (const Vector4& v1, float v2)
{
	return Vector4(
		v1.X - v2,
		v1.Y - v2,
		v1.Z - v2,
		v1.W - v2);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator - (float v1, const Vector4& v2)
{
	return Vector4(
		v1 - v2.X,
		v1 - v2.Y,
		v1 - v2.Z,
		v1 - v2.W);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator * (const Vector4& v1, const Vector4& v2)
{
	return Vector4(
		v1.X * v2.X,
		v1.Y * v2.Y,
		v1.Z * v2.Z,
		v1.W * v2.W);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator * (const Vector4& v1, float v2)
{
	return Vector4(
		v1.X * v2,
		v1.Y * v2,
		v1.Z * v2,
		v1.W * v2);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator * (float v1, const Vector4& v2)
{
	return Vector4(
		v1 * v2.X,
		v1 * v2.Y,
		v1 * v2.Z,
		v1 * v2.W);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator / (const Vector4& v1, const Vector4& v2)
{
	return Vector4(
		v1.X / v2.X,
		v1.Y / v2.Y,
		v1.Z / v2.Z,
		v1.W / v2.W);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator / (const Vector4& v1, float v2)
{
	v2 = 1.0f / v2;
	return Vector4(
		v1.X * v2,
		v1.Y * v2,
		v1.Z * v2,
		v1.W * v2);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator / (float v1, const Vector4& v2)
{
	return Vector4(
		v1 / v2.X,
		v1 / v2.Y,
		v1 / v2.Z,
		v1 / v2.W);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator - (const Vector4& v1)
{
	return Vector4(
		-v1.X,
		-v1.Y,
		-v1.Z,
		-v1.W);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline bool Vector4::operator == (const Vector4& v) const
{
	return (X == v.X && Y == v.Y && Z == v.Z && W == v.W);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline bool Vector4::operator != (const Vector4& v) const
{
	return (X != v.X || Y != v.Y || Z != v.Z || W != v.W);
}

} // namespace Lumino
